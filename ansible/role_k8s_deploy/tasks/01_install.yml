---
- name: Copy key for instance for resource "null_resource" "destroy" of Terraform
  copy:
    src: "{{ playbook_dir }}/key.pem"
    dest: "{{ playbook_dir }}/key_destroy.pem"
  delegate_to: localhost 

- name: Check CRIO installed
  shell: dpkg -s cri-o
  register: rc_crio
  ignore_errors: true

- name: Prepare and install CRIO
  block:
  - name: Prepare for install CRIO_1
    blockinfile:
      path: /etc/modules-load.d/k8s.conf
      block: |
        overlay
        br_netfilter
      create: true

  - name: Prepare for install CRIO_2
    shell: |
      modprobe overlay
      modprobe br_netfilter

  - name: Prepare for install CRIO_3
    blockinfile:
      path: /etc/sysctl.d/k8s.conf
      block: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
      create: true

  - name: Prepare for install CRIO_4
    shell: sudo sysctl --system

  - name: Add CRIO repository
    shell: |
      echo "deb [signed-by=/usr/share/keyrings/libcontainers-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
      echo "deb [signed-by=/usr/share/keyrings/libcontainers-crio-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ CRIO_version }}/{{ OS }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ CRIO_version }}.list

  - name: Import GPG key for CRIO
    shell: |
      rm /usr/share/keyrings/libcontainers-archive-keyring.gpg /usr/share/keyrings/libcontainers-crio-archive-keyring.gpg
      mkdir -p /usr/share/keyrings
      curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/Release.key | gpg --dearmor -o /usr/share/keyrings/libcontainers-archive-keyring.gpg
      curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ CRIO_version }}/{{ OS }}/Release.key | gpg --dearmor -o /usr/share/keyrings/libcontainers-crio-archive-keyring.gpg

  - name: Install CRIO
    shell: |
      apt-get update
      apt-get install -y cri-o cri-o-runc
      systemctl daemon-reload
      systemctl enable crio
      systemctl start crio
    ignore_errors: true
  when: rc_crio.rc != 0

- name: Check k8s installed
  shell: dpkg -s kubelet
  register: rc_k8s
  ignore_errors: true  

- name: Install k8s
  block:
  - name: Install packages needed to use k8s repository
    shell: apt-get install -y apt-transport-https ca-certificates

  - name: Get key gpg k8s and add one in system
    #shell: curl -fsSL https://dl.k8s.io/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
    shell: |
      mkdir -p /etc/apt/keyrings
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

  - name: Add repository k8s
    #shell: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    shell: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

  - name: Install k8s and pin their version
    shell: |
      apt-get update && apt-get install -y kubelet kubeadm kubectl
      apt-mark hold kubelet kubeadm kubectl
      systemctl enable kubelet
      systemctl start kubelet
  when: rc_k8s.rc != 0