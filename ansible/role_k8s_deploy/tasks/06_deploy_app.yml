---
- name: Deploy web page(run in master)
  block:
  - name: Create secret for Amazon Elastic Block Store (EBS) CSI driver
    shell: |
      key=$(sed -r '2!d;s/.*=//' .aws/credentials)
      access_key=$(sed -r '3!d;s/.*=//' .aws/credentials)
      kubectl create secret generic aws-secret \
        --namespace kube-system \
        --from-literal "key_id=${key}" \
        --from-literal "access_key=${access_key}"
    #sed - take 2 and 3 line and delete everything before "=" including "="

  - name: Install Amazon Elastic Block Store (EBS) CSI driver
    shell: kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.24"

  - name: Copy files to master from localhost to deploy web page
    copy:
      src: helm_chart
      dest: $HOME

  - name: Generate values.yaml
    template: 
      src: values.j2
      dest: $HOME/helm_chart/values.yaml

  - name: Run deploy and service
    shell: |
      cd helm_chart/
      while ! helm upgrade --install -n monitoring --create-namespace prometheus .; do sleep 5; done

  - name: Set DeleteOnTermination in "true" on volume created of Prometheus to be one will delete when we run command terraform destroy
    shell: |
      id=$(aws ec2 describe-volumes --filters Name=tag:pv,Values=prometheus --query 'Volumes[0].Attachments[0].InstanceId' --output text --region {{ region_from_terraform }})
      device=$(aws ec2 describe-volumes --filters Name=tag:pv,Values=prometheus --query 'Volumes[0].Attachments[0].Device' --output text --region {{ region_from_terraform }})
      aws ec2 modify-instance-attribute --instance-id $id --block-device-mappings "[{\"DeviceName\": \"$device\",\"Ebs\":{\"DeleteOnTermination\":true}}]" --region {{ region_from_terraform }}

    #id=$(aws ec2 describe-volumes --filters Name=tag:pv,Values=prometheus --query 'Volumes[0].Attachments[0].InstanceId' --output text --region eu-north-1)
    #device=$(aws ec2 describe-volumes --filters Name=tag:pv,Values=prometheus --query 'Volumes[0].Attachments[0].Device' --output text --region eu-north-1)
    #aws ec2 modify-instance-attribute --instance-id $id --block-device-mappings "[{\"DeviceName\": \"$device\",\"Ebs\":{\"DeleteOnTermination\":true}}]" --region  eu-north-1

  become: false
  #if run with become: true(in ansible.cfg) then %HOME will be /root and all run will be as root  
  when: "'ansible_master' in group_names"       